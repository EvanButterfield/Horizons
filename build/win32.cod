; Listing generated by Microsoft (R) Optimizing Compiler Version 19.38.33134.0 

include listing.inc

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	XInputGetStateStub
PUBLIC	XInputSetStateStub
_DATA	SEGMENT
COMM	_fltused:DWORD
_DATA	ENDS
PUBLIC	WinMain
PUBLIC	WinMainCRTStartup
PUBLIC	__real@3f800000
EXTRN	__imp_CompareFileTime:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_GetFileAttributesExA:PROC
EXTRN	__imp_GetFileSizeEx:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_WriteFile:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_ExitProcess:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_FreeLibrary:PROC
EXTRN	__imp_GetModuleHandleW:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	__imp_CopyFileA:PROC
EXTRN	__imp_GetDeviceCaps:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcW:PROC
EXTRN	__imp_RegisterClassW:PROC
EXTRN	__imp_CreateWindowExW:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__imp_ShowCursor:PROC
EXTRN	__imp_ClientToScreen:PROC
EXTRN	__imp_LoadCursorW:PROC
EXTRN	__imp_timeBeginPeriod:PROC
EXTRN	__ImageBase:BYTE
EXTRN	_fltused:DWORD
_BSS	SEGMENT
GlobalState DQ	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$SafeTruncateUInt64 DD imagerel SafeTruncateUInt64
	DD	imagerel SafeTruncateUInt64+47
	DD	imagerel $unwind$SafeTruncateUInt64
$pdata$GameUpdateAndRenderStub DD imagerel GameUpdateAndRenderStub
	DD	imagerel GameUpdateAndRenderStub+47
	DD	imagerel $unwind$GameUpdateAndRenderStub
$pdata$WinMain DD imagerel $LN25
	DD	imagerel $LN25+2151
	DD	imagerel $unwind$WinMain
$pdata$Win32GetWindowDimension DD imagerel Win32GetWindowDimension
	DD	imagerel Win32GetWindowDimension+86
	DD	imagerel $unwind$Win32GetWindowDimension
$pdata$Win32OutputString DD imagerel Win32OutputString
	DD	imagerel Win32OutputString+25
	DD	imagerel $unwind$Win32OutputString
$pdata$Win32LoadXInput DD imagerel Win32LoadXInput
	DD	imagerel Win32LoadXInput+137
	DD	imagerel $unwind$Win32LoadXInput
$pdata$Win32GetLastWriteTime DD imagerel Win32GetLastWriteTime
	DD	imagerel Win32GetLastWriteTime+70
	DD	imagerel $unwind$Win32GetLastWriteTime
$pdata$Win32LoadGameCode DD imagerel Win32LoadGameCode
	DD	imagerel Win32LoadGameCode+285
	DD	imagerel $unwind$Win32LoadGameCode
$pdata$Win32UnloadGameCode DD imagerel Win32UnloadGameCode
	DD	imagerel Win32UnloadGameCode+81
	DD	imagerel $unwind$Win32UnloadGameCode
$pdata$Win32OpenFile DD imagerel Win32OpenFile
	DD	imagerel Win32OpenFile+160
	DD	imagerel $unwind$Win32OpenFile
$pdata$Win32GetFileSize DD imagerel Win32GetFileSize
	DD	imagerel Win32GetFileSize+68
	DD	imagerel $unwind$Win32GetFileSize
$pdata$Win32ReadEntireFile DD imagerel Win32ReadEntireFile
	DD	imagerel Win32ReadEntireFile+82
	DD	imagerel $unwind$Win32ReadEntireFile
$pdata$Win32WriteEntireFile DD imagerel Win32WriteEntireFile
	DD	imagerel Win32WriteEntireFile+113
	DD	imagerel $unwind$Win32WriteEntireFile
$pdata$Win32CloseFile DD imagerel Win32CloseFile
	DD	imagerel Win32CloseFile+25
	DD	imagerel $unwind$Win32CloseFile
$pdata$Win32GetWallClock DD imagerel Win32GetWallClock
	DD	imagerel Win32GetWallClock+25
	DD	imagerel $unwind$Win32GetWallClock
$pdata$Win32GetSecondsElapsed DD imagerel Win32GetSecondsElapsed
	DD	imagerel Win32GetSecondsElapsed+70
	DD	imagerel $unwind$Win32GetSecondsElapsed
$pdata$Win32WindowProc DD imagerel Win32WindowProc
	DD	imagerel Win32WindowProc+1204
	DD	imagerel $unwind$Win32WindowProc
$pdata$WinMainCRTStartup DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$WinMainCRTStartup
pdata	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
_DATA	SEGMENT
$SG7757	DB	'Inside Stub', 0aH, 00H
	ORG $+3
XInputGetState_ DQ FLAT:XInputGetStateStub
XInputSetState_ DQ FLAT:XInputSetStateStub
$SG72995 DB	'Xinput9_1_0.dll', 00H
$SG72997 DB	'Xinput1_4.dll', 00H
	ORG $+2
$SG72999 DB	'Xinput1_3.dll', 00H
	ORG $+2
$SG73001 DB	'XInputGetState', 00H
	ORG $+1
$SG73002 DB	'XInputSetState', 00H
	ORG $+1
$SG73021 DB	'GameUpdateAndRender', 00H
	ORG $+4
$SG73156 DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 00H, 00H
$SG73157 DB	'engine.dll', 00H
	ORG $+5
$SG73158 DB	'engine_temp.dll', 00H
$SG73159 DB	'lock.tmp', 00H
	ORG $+7
$SG73162 DB	'E', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'e', 00H
	DB	00H, 00H
_DATA	ENDS
xdata	SEGMENT
$unwind$SafeTruncateUInt64 DD 010901H
	DD	02209H
$unwind$GameUpdateAndRenderStub DD 011901H
	DD	04219H
$unwind$WinMain DD 041d01H
	DD	04f011dH
	DD	060157016H
$unwind$Win32GetWindowDimension DD 020a01H
	DD	07006720aH
$unwind$Win32OutputString DD 010901H
	DD	04209H
$unwind$Win32LoadXInput DD 010401H
	DD	06204H
$unwind$Win32GetLastWriteTime DD 020a01H
	DD	07006920aH
$unwind$Win32LoadGameCode DD 041d01H
	DD	011011dH
	DD	060157016H
$unwind$Win32UnloadGameCode DD 010901H
	DD	04209H
$unwind$Win32OpenFile DD 010d01H
	DD	0a20dH
$unwind$Win32GetFileSize DD 010901H
	DD	06209H
$unwind$Win32ReadEntireFile DD 011201H
	DD	08212H
$unwind$Win32WriteEntireFile DD 011201H
	DD	08212H
$unwind$Win32CloseFile DD 010901H
	DD	04209H
$unwind$Win32GetWallClock DD 010401H
	DD	06204H
$unwind$Win32GetSecondsElapsed DD 010e01H
	DD	0220eH
$unwind$Win32WindowProc DD 011701H
	DD	0a217H
$unwind$WinMainCRTStartup DD 010401H
	DD	06204H
xdata	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
Result$ = 32
WinMainCRTStartup PROC

; 466  : {

$LN3:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 467  :   int Result = WinMain(GetModuleHandle(0), 0, 0, 0);

  00004	33 c9		 xor	 ecx, ecx
  00006	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleHandleW
  0000c	45 33 c9	 xor	 r9d, r9d
  0000f	45 33 c0	 xor	 r8d, r8d
  00012	33 d2		 xor	 edx, edx
  00014	48 8b c8	 mov	 rcx, rax
  00017	e8 00 00 00 00	 call	 WinMain
  0001c	89 44 24 20	 mov	 DWORD PTR Result$[rsp], eax

; 468  :   ExitProcess(Result);

  00020	8b 4c 24 20	 mov	 ecx, DWORD PTR Result$[rsp]
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExitProcess
$LN2@WinMainCRT:

; 469  : }

  0002a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002e	c3		 ret	 0
WinMainCRTStartup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
IsDown$1 = 32
tv64 = 36
tv79 = 40
tv77 = 44
VKCode$2 = 48
WasDown$3 = 52
AltKeyIsDown$4 = 56
Result$ = 64
Window$ = 96
Message$ = 104
WParam$ = 112
LParam$ = 120
Win32WindowProc PROC

; 476  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 477  :   LRESULT Result = 0;

  00017	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 478  :   
; 479  :   switch(Message)

  00020	8b 44 24 68	 mov	 eax, DWORD PTR Message$[rsp]
  00024	89 44 24 24	 mov	 DWORD PTR tv64[rsp], eax
  00028	81 7c 24 24 05
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 261 ; 00000105H
  00030	77 69		 ja	 SHORT $LN47@Win32Windo
  00032	81 7c 24 24 05
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 261 ; 00000105H
  0003a	0f 84 e3 00 00
	00		 je	 $LN12@Win32Windo
  00040	81 7c 24 24 00
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 256 ; 00000100H
  00048	77 30		 ja	 SHORT $LN48@Win32Windo
  0004a	81 7c 24 24 00
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 256 ; 00000100H
  00052	0f 84 cb 00 00
	00		 je	 $LN9@Win32Windo
  00058	83 7c 24 24 02	 cmp	 DWORD PTR tv64[rsp], 2
  0005d	0f 84 74 03 00
	00		 je	 $LN42@Win32Windo
  00063	83 7c 24 24 10	 cmp	 DWORD PTR tv64[rsp], 16
  00068	0f 84 56 03 00
	00		 je	 $LN41@Win32Windo
  0006e	83 7c 24 24 20	 cmp	 DWORD PTR tv64[rsp], 32	; 00000020H
  00073	74 71		 je	 SHORT $LN6@Win32Windo
  00075	e9 70 03 00 00	 jmp	 $LN43@Win32Windo
$LN48@Win32Windo:
  0007a	81 7c 24 24 01
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 257 ; 00000101H
  00082	0f 84 9b 00 00
	00		 je	 $LN10@Win32Windo
  00088	81 7c 24 24 04
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 260 ; 00000104H
  00090	0f 84 8d 00 00
	00		 je	 $LN11@Win32Windo
  00096	e9 4f 03 00 00	 jmp	 $LN43@Win32Windo
$LN47@Win32Windo:
  0009b	81 7c 24 24 00
	02 00 00	 cmp	 DWORD PTR tv64[rsp], 512 ; 00000200H
  000a3	0f 84 e9 02 00
	00		 je	 $LN40@Win32Windo
  000a9	81 7c 24 24 01
	02 00 00	 cmp	 DWORD PTR tv64[rsp], 513 ; 00000201H
  000b1	0f 84 92 02 00
	00		 je	 $LN36@Win32Windo
  000b7	81 7c 24 24 02
	02 00 00	 cmp	 DWORD PTR tv64[rsp], 514 ; 00000202H
  000bf	0f 84 97 02 00
	00		 je	 $LN37@Win32Windo
  000c5	81 7c 24 24 04
	02 00 00	 cmp	 DWORD PTR tv64[rsp], 516 ; 00000204H
  000cd	0f 84 9c 02 00
	00		 je	 $LN38@Win32Windo
  000d3	81 7c 24 24 05
	02 00 00	 cmp	 DWORD PTR tv64[rsp], 517 ; 00000205H
  000db	0f 84 a1 02 00
	00		 je	 $LN39@Win32Windo
  000e1	e9 04 03 00 00	 jmp	 $LN43@Win32Windo
$LN6@Win32Windo:

; 480  :   {
; 481  :     case WM_SETCURSOR:
; 482  :     {
; 483  :       if(GlobalState->ShowCursor)

  000e6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  000ed	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [rax+176], 0
  000f4	74 20		 je	 SHORT $LN7@Win32Windo

; 484  :       {
; 485  :         Result = DefWindowProc(Window, Message, WParam, LParam);

  000f6	4c 8b 4c 24 78	 mov	 r9, QWORD PTR LParam$[rsp]
  000fb	4c 8b 44 24 70	 mov	 r8, QWORD PTR WParam$[rsp]
  00100	8b 54 24 68	 mov	 edx, DWORD PTR Message$[rsp]
  00104	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Window$[rsp]
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcW
  0010f	48 89 44 24 40	 mov	 QWORD PTR Result$[rsp], rax

; 486  :       }

  00114	eb 08		 jmp	 SHORT $LN8@Win32Windo
$LN7@Win32Windo:

; 487  :       else
; 488  :       {
; 489  :         ShowCursor(0);

  00116	33 c9		 xor	 ecx, ecx
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ShowCursor
$LN8@Win32Windo:

; 490  :       }
; 491  :     } break;

  0011e	e9 e5 02 00 00	 jmp	 $LN2@Win32Windo
$LN9@Win32Windo:
$LN10@Win32Windo:
$LN11@Win32Windo:
$LN12@Win32Windo:

; 492  :     
; 493  :     case WM_KEYDOWN:
; 494  :     case WM_KEYUP:
; 495  :     case WM_SYSKEYDOWN:
; 496  :     case WM_SYSKEYUP:
; 497  :     {
; 498  :       u32 VKCode = (u32)WParam;

  00123	8b 44 24 70	 mov	 eax, DWORD PTR WParam$[rsp]
  00127	89 44 24 30	 mov	 DWORD PTR VKCode$2[rsp], eax

; 499  :       b32 WasDown = LParam & (1 << 30);

  0012b	48 8b 44 24 78	 mov	 rax, QWORD PTR LParam$[rsp]
  00130	48 25 00 00 00
	40		 and	 rax, 1073741824		; 40000000H
  00136	89 44 24 34	 mov	 DWORD PTR WasDown$3[rsp], eax

; 500  :       b32 IsDown = (LParam & (1 << 31)) == 0;

  0013a	48 8b 44 24 78	 mov	 rax, QWORD PTR LParam$[rsp]
  0013f	48 25 00 00 00
	80		 and	 rax, -2147483648	; ffffffff80000000H
  00145	48 85 c0	 test	 rax, rax
  00148	75 0a		 jne	 SHORT $LN45@Win32Windo
  0014a	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00152	eb 08		 jmp	 SHORT $LN46@Win32Windo
$LN45@Win32Windo:
  00154	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN46@Win32Windo:
  0015c	8b 44 24 2c	 mov	 eax, DWORD PTR tv77[rsp]
  00160	89 44 24 20	 mov	 DWORD PTR IsDown$1[rsp], eax

; 501  :       
; 502  :       if(WasDown != IsDown)

  00164	8b 44 24 20	 mov	 eax, DWORD PTR IsDown$1[rsp]
  00168	39 44 24 34	 cmp	 DWORD PTR WasDown$3[rsp], eax
  0016c	0f 84 92 01 00
	00		 je	 $LN13@Win32Windo

; 503  :       {
; 504  :         switch(VKCode)

  00172	8b 44 24 30	 mov	 eax, DWORD PTR VKCode$2[rsp]
  00176	89 44 24 28	 mov	 DWORD PTR tv79[rsp], eax
  0017a	8b 44 24 28	 mov	 eax, DWORD PTR tv79[rsp]
  0017e	83 e8 08	 sub	 eax, 8
  00181	89 44 24 28	 mov	 DWORD PTR tv79[rsp], eax
  00185	83 7c 24 28 4f	 cmp	 DWORD PTR tv79[rsp], 79	; 0000004fH
  0018a	0f 87 74 01 00
	00		 ja	 $LN4@Win32Windo
  00190	8b 44 24 28	 mov	 eax, DWORD PTR tv79[rsp]
  00194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0019b	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN49@Win32Windo[rcx+rax]
  001a3	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN50@Win32Windo[rcx+rax*4]
  001aa	48 03 c1	 add	 rax, rcx
  001ad	ff e0		 jmp	 rax
$LN14@Win32Windo:

; 505  :         {
; 506  :           case 'W':
; 507  :           {
; 508  :             GlobalState->GameInput.Keyboard.W = IsDown;

  001af	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  001b6	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  001ba	89 08		 mov	 DWORD PTR [rax], ecx

; 509  :           } break;

  001bc	e9 43 01 00 00	 jmp	 $LN4@Win32Windo
$LN15@Win32Windo:

; 510  :           
; 511  :           case 'A':
; 512  :           {
; 513  :             GlobalState->GameInput.Keyboard.A = IsDown;

  001c1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  001c8	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  001cc	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 514  :           } break;

  001cf	e9 30 01 00 00	 jmp	 $LN4@Win32Windo
$LN16@Win32Windo:

; 515  :           
; 516  :           case 'S':
; 517  :           {
; 518  :             GlobalState->GameInput.Keyboard.S = IsDown;

  001d4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  001db	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  001df	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 519  :           } break;

  001e2	e9 1d 01 00 00	 jmp	 $LN4@Win32Windo
$LN17@Win32Windo:

; 520  :           
; 521  :           case 'D':
; 522  :           {
; 523  :             GlobalState->GameInput.Keyboard.D = IsDown;

  001e7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  001ee	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  001f2	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 524  :           } break;

  001f5	e9 0a 01 00 00	 jmp	 $LN4@Win32Windo
$LN18@Win32Windo:

; 525  :           
; 526  :           case 'Q':
; 527  :           {
; 528  :             GlobalState->GameInput.Keyboard.Q = IsDown;

  001fa	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00201	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  00205	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 529  :           } break;

  00208	e9 f7 00 00 00	 jmp	 $LN4@Win32Windo
$LN19@Win32Windo:

; 530  :           
; 531  :           case 'E':
; 532  :           {
; 533  :             GlobalState->GameInput.Keyboard.E = IsDown;

  0020d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00214	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  00218	89 48 14	 mov	 DWORD PTR [rax+20], ecx

; 534  :           } break;

  0021b	e9 e4 00 00 00	 jmp	 $LN4@Win32Windo
$LN20@Win32Windo:

; 535  :           
; 536  :           case 'M':
; 537  :           {
; 538  :             GlobalState->GameInput.Keyboard.M = IsDown;

  00220	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00227	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  0022b	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 539  :           } break;

  0022e	e9 d1 00 00 00	 jmp	 $LN4@Win32Windo
$LN21@Win32Windo:

; 540  :           
; 541  :           case VK_UP:
; 542  :           {
; 543  :             GlobalState->GameInput.Keyboard.Up = IsDown;

  00233	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0023a	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  0023e	89 48 1c	 mov	 DWORD PTR [rax+28], ecx

; 544  :           } break;

  00241	e9 be 00 00 00	 jmp	 $LN4@Win32Windo
$LN22@Win32Windo:

; 545  :           
; 546  :           case VK_LEFT:
; 547  :           {
; 548  :             GlobalState->GameInput.Keyboard.Left = IsDown;

  00246	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0024d	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  00251	89 48 20	 mov	 DWORD PTR [rax+32], ecx

; 549  :           } break;

  00254	e9 ab 00 00 00	 jmp	 $LN4@Win32Windo
$LN23@Win32Windo:

; 550  :           
; 551  :           case VK_DOWN:
; 552  :           {
; 553  :             GlobalState->GameInput.Keyboard.Down = IsDown;

  00259	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00260	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  00264	89 48 24	 mov	 DWORD PTR [rax+36], ecx

; 554  :           } break;

  00267	e9 98 00 00 00	 jmp	 $LN4@Win32Windo
$LN24@Win32Windo:

; 555  :           
; 556  :           case VK_RIGHT:
; 557  :           {
; 558  :             GlobalState->GameInput.Keyboard.Right = IsDown;

  0026c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00273	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  00277	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 559  :           } break;

  0027a	e9 85 00 00 00	 jmp	 $LN4@Win32Windo
$LN25@Win32Windo:

; 560  :           
; 561  :           case VK_BACK:
; 562  :           {
; 563  :             if(IsDown)

  0027f	83 7c 24 20 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  00284	74 0e		 je	 SHORT $LN26@Win32Windo

; 564  :             {
; 565  :               GlobalState->GameInput.Keyboard.Backspace = true;

  00286	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0028d	c7 40 2c 01 00
	00 00		 mov	 DWORD PTR [rax+44], 1
$LN26@Win32Windo:

; 566  :             }
; 567  :           } break;

  00294	eb 6e		 jmp	 SHORT $LN4@Win32Windo
$LN27@Win32Windo:

; 568  :           
; 569  :           case VK_ESCAPE:
; 570  :           {
; 571  :             GlobalState->GameInput.Keyboard.Escape = IsDown;

  00296	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0029d	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  002a1	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 572  :           } break;

  002a4	eb 5e		 jmp	 SHORT $LN4@Win32Windo
$LN28@Win32Windo:

; 573  :           
; 574  :           case VK_DELETE:
; 575  :           {
; 576  :             GlobalState->GameInput.Keyboard.Delete = IsDown;

  002a6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  002ad	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  002b1	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 577  :           } break;

  002b4	eb 4e		 jmp	 SHORT $LN4@Win32Windo
$LN29@Win32Windo:

; 578  :           
; 579  :           case VK_SPACE:
; 580  :           {
; 581  :             GlobalState->GameInput.Keyboard.Space = IsDown;

  002b6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  002bd	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  002c1	89 48 38	 mov	 DWORD PTR [rax+56], ecx

; 582  :           } break;

  002c4	eb 3e		 jmp	 SHORT $LN4@Win32Windo
$LN30@Win32Windo:

; 583  :           
; 584  :           case VK_RETURN:
; 585  :           {
; 586  :             GlobalState->GameInput.Keyboard.Enter = IsDown;

  002c6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  002cd	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  002d1	89 48 3c	 mov	 DWORD PTR [rax+60], ecx

; 587  :           } break;

  002d4	eb 2e		 jmp	 SHORT $LN4@Win32Windo
$LN31@Win32Windo:

; 588  :           
; 589  :           case 0x31:
; 590  :           {
; 591  :             GlobalState->GameInput.Keyboard.One = IsDown;

  002d6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  002dd	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  002e1	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 592  :           } break;

  002e4	eb 1e		 jmp	 SHORT $LN4@Win32Windo
$LN32@Win32Windo:

; 593  :           
; 594  :           case 0x32:
; 595  :           {
; 596  :             GlobalState->GameInput.Keyboard.Two = IsDown;

  002e6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  002ed	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  002f1	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 597  :           } break;

  002f4	eb 0e		 jmp	 SHORT $LN4@Win32Windo
$LN33@Win32Windo:

; 598  :           
; 599  :           case 0x33:
; 600  :           {
; 601  :             GlobalState->GameInput.Keyboard.Three = IsDown;

  002f6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  002fd	8b 4c 24 20	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  00301	89 48 48	 mov	 DWORD PTR [rax+72], ecx
$LN4@Win32Windo:
$LN13@Win32Windo:

; 602  :           } break;
; 603  :         }
; 604  :       }
; 605  :       
; 606  :       if(IsDown)

  00304	83 7c 24 20 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  00309	74 39		 je	 SHORT $LN34@Win32Windo

; 607  :       {
; 608  :         b32 AltKeyIsDown = (LParam & (1 << 29));

  0030b	48 8b 44 24 78	 mov	 rax, QWORD PTR LParam$[rsp]
  00310	48 25 00 00 00
	20		 and	 rax, 536870912		; 20000000H
  00316	89 44 24 38	 mov	 DWORD PTR AltKeyIsDown$4[rsp], eax

; 609  :         GlobalState->GameInput.Keyboard.AltF4 = false;

  0031a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00321	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [rax+76], 0

; 610  :         if(AltKeyIsDown && VKCode == VK_F4)

  00328	83 7c 24 38 00	 cmp	 DWORD PTR AltKeyIsDown$4[rsp], 0
  0032d	74 15		 je	 SHORT $LN35@Win32Windo
  0032f	83 7c 24 30 73	 cmp	 DWORD PTR VKCode$2[rsp], 115 ; 00000073H
  00334	75 0e		 jne	 SHORT $LN35@Win32Windo

; 611  :         {
; 612  :           GlobalState->GameInput.Keyboard.AltF4 = true;

  00336	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0033d	c7 40 4c 01 00
	00 00		 mov	 DWORD PTR [rax+76], 1
$LN35@Win32Windo:
$LN34@Win32Windo:

; 613  :         }
; 614  :       }
; 615  :     } break;

  00344	e9 bf 00 00 00	 jmp	 $LN2@Win32Windo
$LN36@Win32Windo:

; 616  :     
; 617  :     case WM_LBUTTONDOWN:
; 618  :     {
; 619  :       GlobalState->GameInput.Mouse.LButton = true;

  00349	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00350	c7 40 50 01 00
	00 00		 mov	 DWORD PTR [rax+80], 1

; 620  :     } break;

  00357	e9 ac 00 00 00	 jmp	 $LN2@Win32Windo
$LN37@Win32Windo:

; 621  :     
; 622  :     case WM_LBUTTONUP:
; 623  :     {
; 624  :       GlobalState->GameInput.Mouse.LButton = false;

  0035c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00363	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [rax+80], 0

; 625  :     } break;

  0036a	e9 99 00 00 00	 jmp	 $LN2@Win32Windo
$LN38@Win32Windo:

; 626  :     
; 627  :     case WM_RBUTTONDOWN:
; 628  :     {
; 629  :       GlobalState->GameInput.Mouse.RButton = true;

  0036f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00376	c7 40 54 01 00
	00 00		 mov	 DWORD PTR [rax+84], 1

; 630  :     } break;

  0037d	e9 86 00 00 00	 jmp	 $LN2@Win32Windo
$LN39@Win32Windo:

; 631  :     
; 632  :     case WM_RBUTTONUP:
; 633  :     {
; 634  :       GlobalState->GameInput.Mouse.RButton = false;

  00382	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00389	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [rax+84], 0

; 635  :     } break;

  00390	eb 76		 jmp	 SHORT $LN2@Win32Windo
$LN40@Win32Windo:

; 636  :     
; 637  :     case WM_MOUSEMOVE:
; 638  :     {
; 639  :       GlobalState->GameInput.Mouse.X = GET_X_LPARAM(LParam);

  00392	48 8b 44 24 78	 mov	 rax, QWORD PTR LParam$[rsp]
  00397	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  0039d	98		 cwde
  0039e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GlobalState
  003a5	89 41 5c	 mov	 DWORD PTR [rcx+92], eax

; 640  :       GlobalState->GameInput.Mouse.Y = GET_Y_LPARAM(LParam);

  003a8	48 8b 44 24 78	 mov	 rax, QWORD PTR LParam$[rsp]
  003ad	48 c1 e8 10	 shr	 rax, 16
  003b1	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  003b7	98		 cwde
  003b8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GlobalState
  003bf	89 41 64	 mov	 DWORD PTR [rcx+100], eax

; 641  :     } break;

  003c2	eb 44		 jmp	 SHORT $LN2@Win32Windo
$LN41@Win32Windo:

; 642  :     
; 643  :     case WM_CLOSE:
; 644  :     {
; 645  :       GlobalState->WindowClosed = true;

  003c4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  003cb	c7 80 e0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+224], 1

; 646  :     } break;

  003d5	eb 31		 jmp	 SHORT $LN2@Win32Windo
$LN42@Win32Windo:

; 647  :     
; 648  :     case WM_DESTROY:
; 649  :     {
; 650  :       GlobalState->WindowClosed = true;;

  003d7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  003de	c7 80 e0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+224], 1

; 651  :     } break;

  003e8	eb 1e		 jmp	 SHORT $LN2@Win32Windo
$LN43@Win32Windo:

; 652  :     
; 653  :     default:
; 654  :     {
; 655  :       Result = DefWindowProc(Window, Message, WParam, LParam);

  003ea	4c 8b 4c 24 78	 mov	 r9, QWORD PTR LParam$[rsp]
  003ef	4c 8b 44 24 70	 mov	 r8, QWORD PTR WParam$[rsp]
  003f4	8b 54 24 68	 mov	 edx, DWORD PTR Message$[rsp]
  003f8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Window$[rsp]
  003fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcW
  00403	48 89 44 24 40	 mov	 QWORD PTR Result$[rsp], rax
$LN2@Win32Windo:

; 656  :     } break;
; 657  :   }
; 658  :   
; 659  :   return(Result);

  00408	48 8b 44 24 40	 mov	 rax, QWORD PTR Result$[rsp]

; 660  : }

  0040d	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00411	c3		 ret	 0
  00412	66 90		 npad	 2
$LN50@Win32Windo:
  00414	00 00 00 00	 DD	 $LN25@Win32Windo
  00418	00 00 00 00	 DD	 $LN30@Win32Windo
  0041c	00 00 00 00	 DD	 $LN27@Win32Windo
  00420	00 00 00 00	 DD	 $LN29@Win32Windo
  00424	00 00 00 00	 DD	 $LN22@Win32Windo
  00428	00 00 00 00	 DD	 $LN21@Win32Windo
  0042c	00 00 00 00	 DD	 $LN24@Win32Windo
  00430	00 00 00 00	 DD	 $LN23@Win32Windo
  00434	00 00 00 00	 DD	 $LN28@Win32Windo
  00438	00 00 00 00	 DD	 $LN31@Win32Windo
  0043c	00 00 00 00	 DD	 $LN32@Win32Windo
  00440	00 00 00 00	 DD	 $LN33@Win32Windo
  00444	00 00 00 00	 DD	 $LN15@Win32Windo
  00448	00 00 00 00	 DD	 $LN17@Win32Windo
  0044c	00 00 00 00	 DD	 $LN19@Win32Windo
  00450	00 00 00 00	 DD	 $LN20@Win32Windo
  00454	00 00 00 00	 DD	 $LN18@Win32Windo
  00458	00 00 00 00	 DD	 $LN16@Win32Windo
  0045c	00 00 00 00	 DD	 $LN14@Win32Windo
  00460	00 00 00 00	 DD	 $LN4@Win32Windo
$LN49@Win32Windo:
  00464	00		 DB	 0
  00465	13		 DB	 19
  00466	13		 DB	 19
  00467	13		 DB	 19
  00468	13		 DB	 19
  00469	01		 DB	 1
  0046a	13		 DB	 19
  0046b	13		 DB	 19
  0046c	13		 DB	 19
  0046d	13		 DB	 19
  0046e	13		 DB	 19
  0046f	13		 DB	 19
  00470	13		 DB	 19
  00471	13		 DB	 19
  00472	13		 DB	 19
  00473	13		 DB	 19
  00474	13		 DB	 19
  00475	13		 DB	 19
  00476	13		 DB	 19
  00477	02		 DB	 2
  00478	13		 DB	 19
  00479	13		 DB	 19
  0047a	13		 DB	 19
  0047b	13		 DB	 19
  0047c	03		 DB	 3
  0047d	13		 DB	 19
  0047e	13		 DB	 19
  0047f	13		 DB	 19
  00480	13		 DB	 19
  00481	04		 DB	 4
  00482	05		 DB	 5
  00483	06		 DB	 6
  00484	07		 DB	 7
  00485	13		 DB	 19
  00486	13		 DB	 19
  00487	13		 DB	 19
  00488	13		 DB	 19
  00489	13		 DB	 19
  0048a	08		 DB	 8
  0048b	13		 DB	 19
  0048c	13		 DB	 19
  0048d	09		 DB	 9
  0048e	0a		 DB	 10
  0048f	0b		 DB	 11
  00490	13		 DB	 19
  00491	13		 DB	 19
  00492	13		 DB	 19
  00493	13		 DB	 19
  00494	13		 DB	 19
  00495	13		 DB	 19
  00496	13		 DB	 19
  00497	13		 DB	 19
  00498	13		 DB	 19
  00499	13		 DB	 19
  0049a	13		 DB	 19
  0049b	13		 DB	 19
  0049c	13		 DB	 19
  0049d	0c		 DB	 12
  0049e	13		 DB	 19
  0049f	13		 DB	 19
  004a0	0d		 DB	 13
  004a1	0e		 DB	 14
  004a2	13		 DB	 19
  004a3	13		 DB	 19
  004a4	13		 DB	 19
  004a5	13		 DB	 19
  004a6	13		 DB	 19
  004a7	13		 DB	 19
  004a8	13		 DB	 19
  004a9	0f		 DB	 15
  004aa	13		 DB	 19
  004ab	13		 DB	 19
  004ac	13		 DB	 19
  004ad	10		 DB	 16
  004ae	13		 DB	 19
  004af	11		 DB	 17
  004b0	13		 DB	 19
  004b1	13		 DB	 19
  004b2	13		 DB	 19
  004b3	12		 DB	 18
Win32WindowProc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
Result$ = 0
Start$ = 32
End$ = 40
Win32GetSecondsElapsed PROC

; 242  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 243  :   f32 Result = ((f32)(End.QuadPart - Start.QuadPart) /

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR Start$[rsp]
  00013	48 8b 4c 24 28	 mov	 rcx, QWORD PTR End$[rsp]
  00018	48 2b c8	 sub	 rcx, rax
  0001b	48 8b c1	 mov	 rax, rcx
  0001e	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00023	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0002a	f3 48 0f 2a 88
	a8 00 00 00	 cvtsi2ss xmm1, QWORD PTR [rax+168]
  00033	f3 0f 5e c1	 divss	 xmm0, xmm1
  00037	f3 0f 11 04 24	 movss	 DWORD PTR Result$[rsp], xmm0

; 244  :                 (f32)GlobalState->PerfCountFrequency);
; 245  :   return(Result);

  0003c	f3 0f 10 04 24	 movss	 xmm0, DWORD PTR Result$[rsp]

; 246  : }

  00041	48 83 c4 18	 add	 rsp, 24
  00045	c3		 ret	 0
Win32GetSecondsElapsed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
Result$ = 32
Win32GetWallClock PROC

; 234  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 235  :   LARGE_INTEGER Result;
; 236  :   QueryPerformanceCounter(&Result);

  00004	48 8d 4c 24 20	 lea	 rcx, QWORD PTR Result$[rsp]
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 237  :   return(Result);

  0000f	48 8b 44 24 20	 mov	 rax, QWORD PTR Result$[rsp]

; 238  : }

  00014	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00018	c3		 ret	 0
Win32GetWallClock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
Handle$ = 48
Win32CloseFile PROC

; 228  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 229  :   CloseHandle(Handle);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR Handle$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 230  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
Win32CloseFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
Result$ = 48
BytesWritten$1 = 52
File$ = 56
Handle$ = 80
DataSize$ = 88
Data$ = 96
Win32WriteEntireFile PROC

; 202  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 203  :   b32 Result = false;

  00012	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR Result$[rsp], 0

; 204  :   
; 205  :   HANDLE File = *((HANDLE *)Handle);

  0001a	48 8b 44 24 50	 mov	 rax, QWORD PTR Handle$[rsp]
  0001f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00022	48 89 44 24 38	 mov	 QWORD PTR File$[rsp], rax

; 206  :   if(File != INVALID_HANDLE_VALUE)

  00027	48 83 7c 24 38
	ff		 cmp	 QWORD PTR File$[rsp], -1
  0002d	74 39		 je	 SHORT $LN2@Win32Write

; 207  :   {
; 208  :     DWORD BytesWritten;
; 209  :     if(WriteFile(File, Data, DataSize, &BytesWritten, 0) &&

  0002f	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00038	4c 8d 4c 24 34	 lea	 r9, QWORD PTR BytesWritten$1[rsp]
  0003d	44 8b 44 24 58	 mov	 r8d, DWORD PTR DataSize$[rsp]
  00042	48 8b 54 24 60	 mov	 rdx, QWORD PTR Data$[rsp]
  00047	48 8b 4c 24 38	 mov	 rcx, QWORD PTR File$[rsp]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WriteFile
  00052	85 c0		 test	 eax, eax
  00054	74 12		 je	 SHORT $LN4@Win32Write
  00056	8b 44 24 58	 mov	 eax, DWORD PTR DataSize$[rsp]
  0005a	39 44 24 34	 cmp	 DWORD PTR BytesWritten$1[rsp], eax
  0005e	75 08		 jne	 SHORT $LN4@Win32Write

; 210  :        BytesWritten == DataSize)
; 211  :     {
; 212  :       Result = true;

  00060	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR Result$[rsp], 1
$LN4@Win32Write:
$LN2@Win32Write:

; 213  :     }
; 214  :     else
; 215  :     {
; 216  :       // TODO(evan): Logging
; 217  :     }
; 218  :   }
; 219  :   else
; 220  :   {
; 221  :     // TODO(evan): Logging
; 222  :   }
; 223  :   
; 224  :   return(Result);

  00068	8b 44 24 30	 mov	 eax, DWORD PTR Result$[rsp]

; 225  : }

  0006c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00070	c3		 ret	 0
Win32WriteEntireFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
BytesRead$1 = 48
Handle$ = 80
FileSize$ = 88
Dest$ = 96
Win32ReadEntireFile PROC

; 175  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 176  :   if(Handle != INVALID_HANDLE_VALUE)

  00012	48 83 7c 24 50
	ff		 cmp	 QWORD PTR Handle$[rsp], -1
  00018	74 33		 je	 SHORT $LN2@Win32ReadE

; 177  :   {
; 178  :     if(Dest)

  0001a	48 83 7c 24 60
	00		 cmp	 QWORD PTR Dest$[rsp], 0
  00020	74 2b		 je	 SHORT $LN4@Win32ReadE

; 179  :     {
; 180  :       DWORD BytesRead;
; 181  :       if(ReadFile(Handle, Dest, FileSize, &BytesRead, 0) &&

  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8d 4c 24 30	 lea	 r9, QWORD PTR BytesRead$1[rsp]
  00030	44 8b 44 24 58	 mov	 r8d, DWORD PTR FileSize$[rsp]
  00035	48 8b 54 24 60	 mov	 rdx, QWORD PTR Dest$[rsp]
  0003a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Handle$[rsp]
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile
  00045	85 c0		 test	 eax, eax
  00047	74 04		 je	 SHORT $LN6@Win32ReadE
  00049	8b 44 24 58	 mov	 eax, DWORD PTR FileSize$[rsp]
$LN6@Win32ReadE:
$LN4@Win32ReadE:
$LN2@Win32ReadE:

; 182  :          BytesRead == FileSize)
; 183  :       {
; 184  :       }
; 185  :       else
; 186  :       {
; 187  :         // TODO(evan): Logging
; 188  :       }
; 189  :     }
; 190  :     else
; 191  :     {
; 192  :       // TODO(evan): Logging
; 193  :     }
; 194  :   }
; 195  :   else
; 196  :   {
; 197  :     // TODO(evan): Logging
; 198  :   }
; 199  : }

  0004d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00051	c3		 ret	 0
Win32ReadEntireFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
Result$ = 32
FileSize$1 = 40
Handle$ = 64
Win32GetFileSize PROC

; 151  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 152  :   u32 Result = 0;

  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR Result$[rsp], 0

; 153  :   
; 154  :   if(Handle != INVALID_HANDLE_VALUE)

  00011	48 83 7c 24 40
	ff		 cmp	 QWORD PTR Handle$[rsp], -1
  00017	74 22		 je	 SHORT $LN2@Win32GetFi

; 155  :   {
; 156  :     LARGE_INTEGER FileSize;
; 157  :     if(GetFileSizeEx(Handle, &FileSize))

  00019	48 8d 54 24 28	 lea	 rdx, QWORD PTR FileSize$1[rsp]
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Handle$[rsp]
  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFileSizeEx
  00029	85 c0		 test	 eax, eax
  0002b	74 0e		 je	 SHORT $LN4@Win32GetFi

; 158  :     {
; 159  :       Result = SafeTruncateUInt64(FileSize.QuadPart);

  0002d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR FileSize$1[rsp]
  00032	e8 00 00 00 00	 call	 SafeTruncateUInt64
  00037	89 44 24 20	 mov	 DWORD PTR Result$[rsp], eax
$LN4@Win32GetFi:
$LN2@Win32GetFi:

; 160  :     }
; 161  :     else
; 162  :     {
; 163  :       // TODO(evan): Logging
; 164  :     }
; 165  :   }
; 166  :   else
; 167  :   {
; 168  :     // TODO(evan): Logging
; 169  :   }
; 170  :   
; 171  :   return(Result);

  0003b	8b 44 24 20	 mov	 eax, DWORD PTR Result$[rsp]

; 172  : }

  0003f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00043	c3		 ret	 0
Win32GetFileSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
ShareMode$ = 64
AccessFlags$ = 68
File$ = 72
FileName$ = 96
Flags$ = 104
Win32OpenFile PROC

; 130  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 131  :   DWORD AccessFlags = 0;

  0000d	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR AccessFlags$[rsp], 0

; 132  :   DWORD ShareMode = 0;

  00015	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR ShareMode$[rsp], 0

; 133  :   if(Flags & FILE_OPEN_READ)

  0001d	8b 44 24 68	 mov	 eax, DWORD PTR Flags$[rsp]
  00021	83 e0 01	 and	 eax, 1
  00024	85 c0		 test	 eax, eax
  00026	74 17		 je	 SHORT $LN2@Win32OpenF

; 134  :   {
; 135  :     AccessFlags |= GENERIC_READ;

  00028	8b 44 24 44	 mov	 eax, DWORD PTR AccessFlags$[rsp]
  0002c	0f ba e8 1f	 bts	 eax, 31
  00030	89 44 24 44	 mov	 DWORD PTR AccessFlags$[rsp], eax

; 136  :     ShareMode |= FILE_SHARE_READ;

  00034	8b 44 24 40	 mov	 eax, DWORD PTR ShareMode$[rsp]
  00038	83 c8 01	 or	 eax, 1
  0003b	89 44 24 40	 mov	 DWORD PTR ShareMode$[rsp], eax
$LN2@Win32OpenF:

; 137  :   }
; 138  :   if(Flags & FILE_OPEN_WRITE)

  0003f	8b 44 24 68	 mov	 eax, DWORD PTR Flags$[rsp]
  00043	83 e0 02	 and	 eax, 2
  00046	85 c0		 test	 eax, eax
  00048	74 17		 je	 SHORT $LN3@Win32OpenF

; 139  :   {
; 140  :     AccessFlags |= GENERIC_WRITE;

  0004a	8b 44 24 44	 mov	 eax, DWORD PTR AccessFlags$[rsp]
  0004e	0f ba e8 1e	 bts	 eax, 30
  00052	89 44 24 44	 mov	 DWORD PTR AccessFlags$[rsp], eax

; 141  :     ShareMode |= FILE_SHARE_WRITE;

  00056	8b 44 24 40	 mov	 eax, DWORD PTR ShareMode$[rsp]
  0005a	83 c8 02	 or	 eax, 2
  0005d	89 44 24 40	 mov	 DWORD PTR ShareMode$[rsp], eax
$LN3@Win32OpenF:

; 142  :   }
; 143  :   
; 144  :   HANDLE File = CreateFileA(FileName, AccessFlags, ShareMode, 0,

  00061	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0006a	c7 44 24 28 80
	00 00 00	 mov	 DWORD PTR [rsp+40], 128	; 00000080H
  00072	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  0007a	45 33 c9	 xor	 r9d, r9d
  0007d	44 8b 44 24 40	 mov	 r8d, DWORD PTR ShareMode$[rsp]
  00082	8b 54 24 44	 mov	 edx, DWORD PTR AccessFlags$[rsp]
  00086	48 8b 4c 24 60	 mov	 rcx, QWORD PTR FileName$[rsp]
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  00091	48 89 44 24 48	 mov	 QWORD PTR File$[rsp], rax

; 145  :                             OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);
; 146  :   
; 147  :   return(File);

  00096	48 8b 44 24 48	 mov	 rax, QWORD PTR File$[rsp]

; 148  : }

  0009b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0009f	c3		 ret	 0
Win32OpenFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
GameCode$ = 48
Win32UnloadGameCode PROC

; 118  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 119  :   if(GameCode->GameDll)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR GameCode$[rsp]
  0000e	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00013	74 1c		 je	 SHORT $LN2@Win32Unloa

; 120  :   {
; 121  :     FreeLibrary(GameCode->GameDll);

  00015	48 8b 44 24 30	 mov	 rax, QWORD PTR GameCode$[rsp]
  0001a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FreeLibrary

; 122  :     GameCode->GameDll = 0;

  00024	48 8b 44 24 30	 mov	 rax, QWORD PTR GameCode$[rsp]
  00029	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@Win32Unloa:

; 123  :   }
; 124  :   
; 125  :   GameCode->IsValid = false;

  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR GameCode$[rsp]
  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 126  :   GameCode->GameUpdateAndRender = GameUpdateAndRenderStub;

  0003c	48 8b 44 24 30	 mov	 rax, QWORD PTR GameCode$[rsp]
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:GameUpdateAndRenderStub
  00048	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 127  : }

  0004c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00050	c3		 ret	 0
Win32UnloadGameCode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
tv85 = 32
$S1$1 = 40
Result$ = 48
Ignored$ = 80
__$ReturnAddress$ = 160
SourceDllName$ = 168
TempDllName$ = 176
LockName$ = 184
Win32LoadGameCode PROC

; 88   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 89   :   win32_game_code Result = {0};

  0001d	48 8d 44 24 30	 lea	 rax, QWORD PTR Result$[rsp]
  00022	48 8b f8	 mov	 rdi, rax
  00025	33 c0		 xor	 eax, eax
  00027	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0002c	f3 aa		 rep stosb

; 90   :   
; 91   :   Result.LastWriteTime = Win32GetLastWriteTime(SourceDllName);

  0002e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR SourceDllName$[rsp]
  00036	e8 00 00 00 00	 call	 Win32GetLastWriteTime
  0003b	48 89 44 24 40	 mov	 QWORD PTR Result$[rsp+16], rax

; 92   :   CopyFileA(SourceDllName, TempDllName, false);

  00040	45 33 c0	 xor	 r8d, r8d
  00043	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR TempDllName$[rsp]
  0004b	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR SourceDllName$[rsp]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CopyFileA

; 93   :   
; 94   :   WIN32_FILE_ATTRIBUTE_DATA Ignored;
; 95   :   if(!GetFileAttributesExA(LockName, GetFileExInfoStandard, &Ignored))

  00059	4c 8d 44 24 50	 lea	 r8, QWORD PTR Ignored$[rsp]
  0005e	33 d2		 xor	 edx, edx
  00060	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR LockName$[rsp]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFileAttributesExA
  0006e	85 c0		 test	 eax, eax
  00070	75 54		 jne	 SHORT $LN2@Win32LoadG

; 96   :   {
; 97   :     Result.GameDll = LoadLibraryA(TempDllName);

  00072	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR TempDllName$[rsp]
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00080	48 89 44 24 38	 mov	 QWORD PTR Result$[rsp+8], rax

; 98   :     if(Result.GameDll)

  00085	48 83 7c 24 38
	00		 cmp	 QWORD PTR Result$[rsp+8], 0
  0008b	74 39		 je	 SHORT $LN3@Win32LoadG

; 99   :     {
; 100  :       Result.GameUpdateAndRender =

  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG73021
  00094	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Result$[rsp+8]
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  0009f	48 89 44 24 48	 mov	 QWORD PTR Result$[rsp+24], rax

; 101  :       (game_update_and_render *)GetProcAddress(Result.GameDll, "GameUpdateAndRender");
; 102  :       
; 103  :       Result.IsValid = Result.GameUpdateAndRender != 0;

  000a4	48 83 7c 24 48
	00		 cmp	 QWORD PTR Result$[rsp+24], 0
  000aa	74 0a		 je	 SHORT $LN6@Win32LoadG
  000ac	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv85[rsp], 1
  000b4	eb 08		 jmp	 SHORT $LN7@Win32LoadG
$LN6@Win32LoadG:
  000b6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv85[rsp], 0
$LN7@Win32LoadG:
  000be	8b 44 24 20	 mov	 eax, DWORD PTR tv85[rsp]
  000c2	89 44 24 30	 mov	 DWORD PTR Result$[rsp], eax
$LN3@Win32LoadG:
$LN2@Win32LoadG:

; 104  :     }
; 105  :   }
; 106  :   
; 107  :   if(!Result.IsValid)

  000c6	83 7c 24 30 00	 cmp	 DWORD PTR Result$[rsp], 0
  000cb	75 27		 jne	 SHORT $LN4@Win32LoadG

; 108  :   {
; 109  :     Result.GameUpdateAndRender = GameUpdateAndRenderStub;

  000cd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:GameUpdateAndRenderStub
  000d4	48 89 44 24 48	 mov	 QWORD PTR Result$[rsp+24], rax

; 110  :     Result.LastWriteTime = (FILETIME){0};

  000d9	48 8d 44 24 28	 lea	 rax, QWORD PTR $S1$1[rsp]
  000de	48 8b f8	 mov	 rdi, rax
  000e1	33 c0		 xor	 eax, eax
  000e3	b9 08 00 00 00	 mov	 ecx, 8
  000e8	f3 aa		 rep stosb
  000ea	48 8b 44 24 28	 mov	 rax, QWORD PTR $S1$1[rsp]
  000ef	48 89 44 24 40	 mov	 QWORD PTR Result$[rsp+16], rax
$LN4@Win32LoadG:

; 111  :   }
; 112  :   
; 113  :   return(Result);

  000f4	48 8d 44 24 30	 lea	 rax, QWORD PTR Result$[rsp]
  000f9	48 8b bc 24 a0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00101	48 8b f0	 mov	 rsi, rax
  00104	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00109	f3 a4		 rep movsb
  0010b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 114  : }

  00113	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0011a	5f		 pop	 rdi
  0011b	5e		 pop	 rsi
  0011c	c3		 ret	 0
Win32LoadGameCode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
LastWriteTime$ = 32
Data$ = 40
FileName$ = 96
Win32GetLastWriteTime PROC

; 74   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 75   :   FILETIME LastWriteTime = {0};

  0000a	48 8d 44 24 20	 lea	 rax, QWORD PTR LastWriteTime$[rsp]
  0000f	48 8b f8	 mov	 rdi, rax
  00012	33 c0		 xor	 eax, eax
  00014	b9 08 00 00 00	 mov	 ecx, 8
  00019	f3 aa		 rep stosb

; 76   :   
; 77   :   WIN32_FILE_ATTRIBUTE_DATA Data;
; 78   :   if(GetFileAttributesExA(FileName, GetFileExInfoStandard, &Data))

  0001b	4c 8d 44 24 28	 lea	 r8, QWORD PTR Data$[rsp]
  00020	33 d2		 xor	 edx, edx
  00022	48 8b 4c 24 60	 mov	 rcx, QWORD PTR FileName$[rsp]
  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFileAttributesExA
  0002d	85 c0		 test	 eax, eax
  0002f	74 0a		 je	 SHORT $LN2@Win32GetLa

; 79   :   {
; 80   :     LastWriteTime = Data.ftLastWriteTime;

  00031	48 8b 44 24 3c	 mov	 rax, QWORD PTR Data$[rsp+20]
  00036	48 89 44 24 20	 mov	 QWORD PTR LastWriteTime$[rsp], rax
$LN2@Win32GetLa:

; 81   :   }
; 82   :   
; 83   :   return(LastWriteTime);

  0003b	48 8b 44 24 20	 mov	 rax, QWORD PTR LastWriteTime$[rsp]

; 84   : }

  00040	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00044	5f		 pop	 rdi
  00045	c3		 ret	 0
Win32GetLastWriteTime ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
XInputLibrary$ = 32
Win32LoadXInput PROC

; 54   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 55   :   HMODULE XInputLibrary = LoadLibraryA("Xinput9_1_0.dll");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG72995
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00011	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax

; 56   :   if(!XInputLibrary)

  00016	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  0001c	75 2c		 jne	 SHORT $LN2@Win32LoadX

; 57   :   {
; 58   :     XInputLibrary = LoadLibraryA("Xinput1_4.dll");

  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG72997
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  0002b	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax

; 59   :     if(!XInputLibrary)

  00030	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  00036	75 12		 jne	 SHORT $LN3@Win32LoadX

; 60   :     {
; 61   :       XInputLibrary = LoadLibraryA("Xinput1_3.dll");

  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG72999
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00045	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax
$LN3@Win32LoadX:
$LN2@Win32LoadX:

; 62   :     }
; 63   :   }
; 64   :   
; 65   :   if(XInputLibrary)

  0004a	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  00050	74 32		 je	 SHORT $LN4@Win32LoadX

; 66   :   {
; 67   :     XInputGetState = (x_input_get_state *)GetProcAddress(XInputLibrary, "XInputGetState");

  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG73001
  00059	48 8b 4c 24 20	 mov	 rcx, QWORD PTR XInputLibrary$[rsp]
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00064	48 89 05 00 00
	00 00		 mov	 QWORD PTR XInputGetState_, rax

; 68   :     XInputSetState = (x_input_set_state *)GetProcAddress(XInputLibrary, "XInputSetState");

  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG73002
  00072	48 8b 4c 24 20	 mov	 rcx, QWORD PTR XInputLibrary$[rsp]
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  0007d	48 89 05 00 00
	00 00		 mov	 QWORD PTR XInputSetState_, rax
$LN4@Win32LoadX:

; 69   :   }
; 70   : }

  00084	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00088	c3		 ret	 0
Win32LoadXInput ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
Text$ = 48
Win32OutputString PROC

; 48   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 49   :   OutputDebugStringA(Text);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR Text$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 50   : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
Win32OutputString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
dwUserIndex$ = 8
pVibration$ = 16
XInputSetStateStub PROC

; 41   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 42   :   return(ERROR_DEVICE_NOT_CONNECTED);

  00009	b8 8f 04 00 00	 mov	 eax, 1167		; 0000048fH

; 43   : }

  0000e	c3		 ret	 0
XInputSetStateStub ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
dwUserIndex$ = 8
pState$ = 16
XInputGetStateStub PROC

; 32   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 33   :   return(ERROR_DEVICE_NOT_CONNECTED);

  00009	b8 8f 04 00 00	 mov	 eax, 1167		; 0000048fH

; 34   : }

  0000e	c3		 ret	 0
XInputGetStateStub ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
Dimension$ = 32
ClientRect$ = 40
Window$ = 80
Win32GetWindowDimension PROC

; 15   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 16   :   window_dimension Dimension = {0};

  0000a	48 8d 44 24 20	 lea	 rax, QWORD PTR Dimension$[rsp]
  0000f	48 8b f8	 mov	 rdi, rax
  00012	33 c0		 xor	 eax, eax
  00014	b9 08 00 00 00	 mov	 ecx, 8
  00019	f3 aa		 rep stosb

; 17   :   
; 18   :   RECT ClientRect;
; 19   :   GetClientRect(Window, &ClientRect);

  0001b	48 8d 54 24 28	 lea	 rdx, QWORD PTR ClientRect$[rsp]
  00020	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Window$[rsp]
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 20   :   Dimension.Width = ClientRect.right - ClientRect.left;

  0002b	8b 44 24 28	 mov	 eax, DWORD PTR ClientRect$[rsp]
  0002f	8b 4c 24 30	 mov	 ecx, DWORD PTR ClientRect$[rsp+8]
  00033	2b c8		 sub	 ecx, eax
  00035	8b c1		 mov	 eax, ecx
  00037	89 44 24 20	 mov	 DWORD PTR Dimension$[rsp], eax

; 21   :   Dimension.Height = ClientRect.bottom - ClientRect.top;

  0003b	8b 44 24 2c	 mov	 eax, DWORD PTR ClientRect$[rsp+4]
  0003f	8b 4c 24 34	 mov	 ecx, DWORD PTR ClientRect$[rsp+12]
  00043	2b c8		 sub	 ecx, eax
  00045	8b c1		 mov	 eax, ecx
  00047	89 44 24 24	 mov	 DWORD PTR Dimension$[rsp+4], eax

; 22   :   return(Dimension);

  0004b	48 8b 44 24 20	 mov	 rax, QWORD PTR Dimension$[rsp]

; 23   : }

  00050	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
Win32GetWindowDimension ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\win32.c
_TEXT	SEGMENT
Input$1 = 96
Pad$2 = 104
tv89 = 112
Win32RefreshRate$3 = 116
MonitorRefreshHz$4 = 120
tv298 = 124
tv306 = 128
Vibration$5 = 132
ShouldClose$6 = 136
DesiredSchedularMS$ = 140
GameUpdateHz$7 = 144
WindowResized$8 = 148
DeltaTime$9 = 152
GameCodeDllName$ = 160
NewWindowDimension$10 = 168
PlatformMemorySize$11 = 176
GameCodeTempDllName$ = 184
Center$12 = 192
EndCounter$13 = 200
LastCounter$14 = 208
GameCodeLockName$ = 216
SleepIsGranular$ = 224
TargetSecondsPerFrame$15 = 228
TotalEngineMemorySize$16 = 232
BaseAddress$17 = 240
PerfCountFrequencyResult$ = 248
DeviceContext$18 = 256
NewDllWriteTime$19 = 264
ControllerState$20 = 272
WindowRect$21 = 288
EngineMemory$ = 304
Game$22 = 400
WindowClass$ = 432
Message$23 = 512
$T24 = 560
$T25 = 592
Instance$ = 656
PrevInstance$ = 664
CmdLine$ = 672
CmdShow$ = 680
WinMain	PROC

; 269  : {

$LN25:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 78 02
	00 00		 sub	 rsp, 632		; 00000278H

; 270  :   // Assert((uint64)(*((int64*)__readgsqword(0x60) + 0x23)) >= 10);
; 271  :   
; 272  :   memory EngineMemory = {0};

  0001d	48 8d 84 24 30
	01 00 00	 lea	 rax, QWORD PTR EngineMemory$[rsp]
  00025	48 8b f8	 mov	 rdi, rax
  00028	33 c0		 xor	 eax, eax
  0002a	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  0002f	f3 aa		 rep stosb

; 273  :   {
; 274  : #if HORIZONS_INTERNAL
; 275  :     LPVOID BaseAddress = (LPVOID)Tebibytes(2);

  00031	48 b8 00 00 00
	00 00 02 00 00	 mov	 rax, 2199023255552	; 0000020000000000H
  0003b	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR BaseAddress$17[rsp], rax

; 276  : #else
; 277  :     LPVOID BaseAddress = 0;
; 278  : #endif
; 279  :     
; 280  :     EngineMemory.PermanentStorageSize = Mebibytes(64);

  00043	48 c7 84 24 30
	01 00 00 00 00
	00 04		 mov	 QWORD PTR EngineMemory$[rsp], 67108864 ; 04000000H

; 281  :     EngineMemory.TempStorageSize = Gibibytes(1);

  0004f	48 c7 84 24 40
	01 00 00 00 00
	00 40		 mov	 QWORD PTR EngineMemory$[rsp+16], 1073741824 ; 40000000H

; 282  :     
; 283  :     EngineMemory.OpenFile = Win32OpenFile;

  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32OpenFile
  00062	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR EngineMemory$[rsp+32], rax

; 284  :     EngineMemory.GetFileSize = Win32GetFileSize;

  0006a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32GetFileSize
  00071	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR EngineMemory$[rsp+40], rax

; 285  :     EngineMemory.ReadEntireFile = Win32ReadEntireFile;

  00079	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32ReadEntireFile
  00080	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR EngineMemory$[rsp+56], rax

; 286  :     EngineMemory.WriteEntireFile = Win32WriteEntireFile;

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32WriteEntireFile
  0008f	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR EngineMemory$[rsp+64], rax

; 287  :     EngineMemory.CloseFile = Win32CloseFile;

  00097	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32CloseFile
  0009e	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR EngineMemory$[rsp+72], rax

; 288  :     EngineMemory.OutputString = Win32OutputString;

  000a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32OutputString
  000ad	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR EngineMemory$[rsp+48], rax

; 289  :     
; 290  :     memory_index PlatformMemorySize = Mebibytes(64);

  000b5	48 c7 84 24 b0
	00 00 00 00 00
	00 04		 mov	 QWORD PTR PlatformMemorySize$11[rsp], 67108864 ; 04000000H

; 291  :     
; 292  :     memory_index TotalEngineMemorySize = EngineMemory.PermanentStorageSize + EngineMemory.TempStorageSize + PlatformMemorySize;

  000c1	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR EngineMemory$[rsp+16]
  000c9	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR EngineMemory$[rsp]
  000d1	48 03 c8	 add	 rcx, rax
  000d4	48 8b c1	 mov	 rax, rcx
  000d7	48 03 84 24 b0
	00 00 00	 add	 rax, QWORD PTR PlatformMemorySize$11[rsp]
  000df	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR TotalEngineMemorySize$16[rsp], rax

; 293  :     GlobalState = VirtualAlloc(BaseAddress, sizeof(win32_state) + TotalEngineMemorySize,

  000e7	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR TotalEngineMemorySize$16[rsp]
  000ef	48 05 e8 00 00
	00		 add	 rax, 232		; 000000e8H
  000f5	41 b9 04 00 00
	00		 mov	 r9d, 4
  000fb	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  00101	48 8b d0	 mov	 rdx, rax
  00104	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR BaseAddress$17[rsp]
  0010c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  00112	48 89 05 00 00
	00 00		 mov	 QWORD PTR GlobalState, rax

; 294  :                                MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);
; 295  :     
; 296  :     InitializeArena(&GlobalState->Arena, (u8 *)GlobalState + sizeof(win32_state), PlatformMemorySize);

  00119	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00120	48 05 e8 00 00
	00		 add	 rax, 232		; 000000e8H
  00126	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GlobalState
  0012d	48 81 c1 c8 00
	00 00		 add	 rcx, 200		; 000000c8H
  00134	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR PlatformMemorySize$11[rsp]
  0013c	48 8b d0	 mov	 rdx, rax
  0013f	e8 00 00 00 00	 call	 InitializeArena

; 297  :     EngineMemory.PermanentStorage = GlobalState->Arena.Memory + PlatformMemorySize;

  00144	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0014b	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00152	48 03 84 24 b0
	00 00 00	 add	 rax, QWORD PTR PlatformMemorySize$11[rsp]
  0015a	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR EngineMemory$[rsp+8], rax

; 298  :     EngineMemory.TempStorage = (u8 *)EngineMemory.PermanentStorage + EngineMemory.PermanentStorageSize;

  00162	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR EngineMemory$[rsp]
  0016a	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR EngineMemory$[rsp+8]
  00172	48 03 c8	 add	 rcx, rax
  00175	48 8b c1	 mov	 rax, rcx
  00178	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR EngineMemory$[rsp+24], rax

; 299  :   }
; 300  :   
; 301  :   LARGE_INTEGER PerfCountFrequencyResult;
; 302  :   QueryPerformanceFrequency(&PerfCountFrequencyResult);

  00180	48 8d 8c 24 f8
	00 00 00	 lea	 rcx, QWORD PTR PerfCountFrequencyResult$[rsp]
  00188	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceFrequency

; 303  :   GlobalState->PerfCountFrequency = PerfCountFrequencyResult.QuadPart;

  0018e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00195	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR PerfCountFrequencyResult$[rsp]
  0019d	48 89 88 a8 00
	00 00		 mov	 QWORD PTR [rax+168], rcx

; 304  :   
; 305  :   // NOTE(evan): Set the Windows schedular granularity to 1ms
; 306  :   // so that Sleep() can be more granular
; 307  :   UINT DesiredSchedularMS = 1;

  001a4	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR DesiredSchedularMS$[rsp], 1

; 308  :   b32 SleepIsGranular = (timeBeginPeriod(DesiredSchedularMS) == TIMERR_NOERROR);

  001af	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR DesiredSchedularMS$[rsp]
  001b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_timeBeginPeriod
  001bc	85 c0		 test	 eax, eax
  001be	75 0a		 jne	 SHORT $LN19@WinMain
  001c0	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  001c8	eb 08		 jmp	 SHORT $LN20@WinMain
$LN19@WinMain:
  001ca	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN20@WinMain:
  001d2	8b 44 24 70	 mov	 eax, DWORD PTR tv89[rsp]
  001d6	89 84 24 e0 00
	00 00		 mov	 DWORD PTR SleepIsGranular$[rsp], eax

; 309  :   
; 310  :   Win32LoadXInput();

  001dd	e8 00 00 00 00	 call	 Win32LoadXInput

; 311  :   
; 312  :   WNDCLASSW WindowClass = {0};

  001e2	48 8d 84 24 b0
	01 00 00	 lea	 rax, QWORD PTR WindowClass$[rsp]
  001ea	48 8b f8	 mov	 rdi, rax
  001ed	33 c0		 xor	 eax, eax
  001ef	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  001f4	f3 aa		 rep stosb

; 313  :   WindowClass.style = CS_HREDRAW|CS_VREDRAW|CS_OWNDC;

  001f6	c7 84 24 b0 01
	00 00 23 00 00
	00		 mov	 DWORD PTR WindowClass$[rsp], 35 ; 00000023H

; 314  :   WindowClass.lpfnWndProc = Win32WindowProc;

  00201	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32WindowProc
  00208	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 315  :   WindowClass.hInstance = Instance;

  00210	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  00218	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 316  :   WindowClass.hCursor = LoadCursorW(0, IDC_ARROW);

  00220	ba 00 7f 00 00	 mov	 edx, 32512		; 00007f00H
  00225	33 c9		 xor	 ecx, ecx
  00227	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadCursorW
  0022d	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+40], rax

; 317  :   WindowClass.lpszClassName = L"WindowClass";

  00235	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG73156
  0023c	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 318  :   
; 319  :   s8 *GameCodeDllName = "engine.dll";

  00244	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG73157
  0024b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR GameCodeDllName$[rsp], rax

; 320  :   s8 *GameCodeTempDllName = "engine_temp.dll";

  00253	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG73158
  0025a	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR GameCodeTempDllName$[rsp], rax

; 321  :   s8 *GameCodeLockName = "lock.tmp";

  00262	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG73159
  00269	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR GameCodeLockName$[rsp], rax

; 322  :   
; 323  :   if(RegisterClassW(&WindowClass))

  00271	48 8d 8c 24 b0
	01 00 00	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  00279	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassW
  0027f	0f b7 c0	 movzx	 eax, ax
  00282	85 c0		 test	 eax, eax
  00284	0f 84 ca 05 00
	00		 je	 $LN6@WinMain

; 324  :   {
; 325  :     GlobalState->Window = CreateWindowW(WindowClass.lpszClassName, L"Engine",

  0028a	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  00293	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  0029b	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  002a0	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  002a9	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  002b2	c7 44 24 38 bc
	02 00 00	 mov	 DWORD PTR [rsp+56], 700	; 000002bcH
  002ba	c7 44 24 30 78
	05 00 00	 mov	 DWORD PTR [rsp+48], 1400 ; 00000578H
  002c2	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  002ca	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  002d2	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  002d8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG73162
  002df	48 8b 94 24 f0
	01 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  002e7	33 c9		 xor	 ecx, ecx
  002e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExW
  002ef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GlobalState
  002f6	48 89 81 b8 00
	00 00		 mov	 QWORD PTR [rcx+184], rax

; 326  :                                         WS_OVERLAPPEDWINDOW|WS_VISIBLE,
; 327  :                                         CW_USEDEFAULT, CW_USEDEFAULT, 1400, 700,
; 328  :                                         0, 0, Instance, 0);
; 329  :     
; 330  :     GlobalState->ShowCursor = true;

  002fd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00304	c7 80 b0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+176], 1

; 331  :     
; 332  :     if(GlobalState->Window)

  0030e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00315	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0031d	0f 84 28 05 00
	00		 je	 $LN8@WinMain

; 333  :     {
; 334  :       HDC DeviceContext = GetDC(GlobalState->Window);

  00323	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0032a	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00331	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  00337	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR DeviceContext$18[rsp], rax

; 335  :       
; 336  :       s32 MonitorRefreshHz = 60;

  0033f	c7 44 24 78 3c
	00 00 00	 mov	 DWORD PTR MonitorRefreshHz$4[rsp], 60 ; 0000003cH

; 337  :       s32 Win32RefreshRate = GetDeviceCaps(DeviceContext, VREFRESH);

  00347	ba 74 00 00 00	 mov	 edx, 116		; 00000074H
  0034c	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR DeviceContext$18[rsp]
  00354	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDeviceCaps
  0035a	89 44 24 74	 mov	 DWORD PTR Win32RefreshRate$3[rsp], eax

; 338  :       if(Win32RefreshRate > 1)

  0035e	83 7c 24 74 01	 cmp	 DWORD PTR Win32RefreshRate$3[rsp], 1
  00363	7e 08		 jle	 SHORT $LN10@WinMain

; 339  :       {
; 340  :         MonitorRefreshHz = Win32RefreshRate;

  00365	8b 44 24 74	 mov	 eax, DWORD PTR Win32RefreshRate$3[rsp]
  00369	89 44 24 78	 mov	 DWORD PTR MonitorRefreshHz$4[rsp], eax
$LN10@WinMain:

; 341  :       }
; 342  :       f32 GameUpdateHz = ((f32)MonitorRefreshHz);

  0036d	f3 0f 2a 44 24
	78		 cvtsi2ss xmm0, DWORD PTR MonitorRefreshHz$4[rsp]
  00373	f3 0f 11 84 24
	90 00 00 00	 movss	 DWORD PTR GameUpdateHz$7[rsp], xmm0

; 343  :       f32 TargetSecondsPerFrame = 1.0f / (f32)GameUpdateHz;

  0037c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00384	f3 0f 5e 84 24
	90 00 00 00	 divss	 xmm0, DWORD PTR GameUpdateHz$7[rsp]
  0038d	f3 0f 11 84 24
	e4 00 00 00	 movss	 DWORD PTR TargetSecondsPerFrame$15[rsp], xmm0

; 344  :       
; 345  :       win32_game_code Game = Win32LoadGameCode(GameCodeDllName, GameCodeTempDllName, GameCodeLockName);

  00396	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR GameCodeLockName$[rsp]
  0039e	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR GameCodeTempDllName$[rsp]
  003a6	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR GameCodeDllName$[rsp]
  003ae	48 8d 8c 24 30
	02 00 00	 lea	 rcx, QWORD PTR $T24[rsp]
  003b6	e8 00 00 00 00	 call	 Win32LoadGameCode
  003bb	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR Game$22[rsp]
  003c3	48 8b f9	 mov	 rdi, rcx
  003c6	48 8b f0	 mov	 rsi, rax
  003c9	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  003ce	f3 a4		 rep movsb

; 346  :       
; 347  :       if(EngineMemory.PermanentStorage)

  003d0	48 83 bc 24 38
	01 00 00 00	 cmp	 QWORD PTR EngineMemory$[rsp+8], 0
  003d9	0f 84 6a 04 00
	00		 je	 $LN11@WinMain

; 348  :       {
; 349  :         GlobalState->WindowDimension = Win32GetWindowDimension(GlobalState->Window);

  003df	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  003e6	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  003ed	e8 00 00 00 00	 call	 Win32GetWindowDimension
  003f2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GlobalState
  003f9	48 89 81 c0 00
	00 00		 mov	 QWORD PTR [rcx+192], rax

; 350  :         
; 351  :         LARGE_INTEGER LastCounter = Win32GetWallClock();

  00400	e8 00 00 00 00	 call	 Win32GetWallClock
  00405	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR LastCounter$14[rsp], rax

; 352  :         b32 ShouldClose = false;

  0040d	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ShouldClose$6[rsp], 0
$LN2@WinMain:

; 353  :         while(!ShouldClose)

  00418	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR ShouldClose$6[rsp], 0
  00420	0f 85 23 04 00
	00		 jne	 $LN3@WinMain

; 354  :         {
; 355  :           f32 DeltaTime;
; 356  :           {
; 357  :             LARGE_INTEGER EndCounter = Win32GetWallClock();

  00426	e8 00 00 00 00	 call	 Win32GetWallClock
  0042b	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR EndCounter$13[rsp], rax

; 358  :             DeltaTime = Win32GetSecondsElapsed(LastCounter, EndCounter);

  00433	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR EndCounter$13[rsp]
  0043b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR LastCounter$14[rsp]
  00443	e8 00 00 00 00	 call	 Win32GetSecondsElapsed
  00448	f3 0f 11 84 24
	98 00 00 00	 movss	 DWORD PTR DeltaTime$9[rsp], xmm0

; 359  :             LastCounter = EndCounter;

  00451	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR EndCounter$13[rsp]
  00459	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR LastCounter$14[rsp], rax

; 360  :           }
; 361  :           
; 362  :           {
; 363  :             FILETIME NewDllWriteTime = Win32GetLastWriteTime(GameCodeDllName);

  00461	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR GameCodeDllName$[rsp]
  00469	e8 00 00 00 00	 call	 Win32GetLastWriteTime
  0046e	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR NewDllWriteTime$19[rsp], rax

; 364  :             if(CompareFileTime(&Game.LastWriteTime, &NewDllWriteTime))

  00476	48 8d 94 24 08
	01 00 00	 lea	 rdx, QWORD PTR NewDllWriteTime$19[rsp]
  0047e	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR Game$22[rsp+16]
  00486	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CompareFileTime
  0048c	85 c0		 test	 eax, eax
  0048e	74 47		 je	 SHORT $LN12@WinMain

; 365  :             {
; 366  :               Win32UnloadGameCode(&Game);

  00490	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR Game$22[rsp]
  00498	e8 00 00 00 00	 call	 Win32UnloadGameCode

; 367  :               Game = Win32LoadGameCode(GameCodeDllName, GameCodeTempDllName, GameCodeLockName);

  0049d	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR GameCodeLockName$[rsp]
  004a5	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR GameCodeTempDllName$[rsp]
  004ad	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR GameCodeDllName$[rsp]
  004b5	48 8d 8c 24 50
	02 00 00	 lea	 rcx, QWORD PTR $T25[rsp]
  004bd	e8 00 00 00 00	 call	 Win32LoadGameCode
  004c2	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR Game$22[rsp]
  004ca	48 8b f9	 mov	 rdi, rcx
  004cd	48 8b f0	 mov	 rsi, rax
  004d0	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  004d5	f3 a4		 rep movsb
$LN12@WinMain:

; 368  :             }
; 369  :           }
; 370  :           
; 371  :           GlobalState->GameInput.Keyboard.Backspace = false;

  004d7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  004de	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [rax+44], 0
$LN4@WinMain:

; 372  :           {
; 373  :             MSG Message;
; 374  :             while(PeekMessageA(&Message, 0, 0, 0, PM_REMOVE))

  004e5	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  004ed	45 33 c9	 xor	 r9d, r9d
  004f0	45 33 c0	 xor	 r8d, r8d
  004f3	33 d2		 xor	 edx, edx
  004f5	48 8d 8c 24 00
	02 00 00	 lea	 rcx, QWORD PTR Message$23[rsp]
  004fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageA
  00503	85 c0		 test	 eax, eax
  00505	74 1e		 je	 SHORT $LN5@WinMain

; 375  :             {
; 376  :               TranslateMessage(&Message);

  00507	48 8d 8c 24 00
	02 00 00	 lea	 rcx, QWORD PTR Message$23[rsp]
  0050f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 377  :               DispatchMessageA(&Message);

  00515	48 8d 8c 24 00
	02 00 00	 lea	 rcx, QWORD PTR Message$23[rsp]
  0051d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA

; 378  :             }

  00523	eb c0		 jmp	 SHORT $LN4@WinMain
$LN5@WinMain:

; 379  :           }
; 380  :           
; 381  :           {
; 382  :             controller_input *Input = &GlobalState->GameInput.Controller;

  00525	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0052c	48 83 c0 68	 add	 rax, 104		; 00000068H
  00530	48 89 44 24 60	 mov	 QWORD PTR Input$1[rsp], rax

; 383  :             
; 384  :             XINPUT_STATE ControllerState = {0};

  00535	48 8d 84 24 10
	01 00 00	 lea	 rax, QWORD PTR ControllerState$20[rsp]
  0053d	48 8b f8	 mov	 rdi, rax
  00540	33 c0		 xor	 eax, eax
  00542	b9 10 00 00 00	 mov	 ecx, 16
  00547	f3 aa		 rep stosb

; 385  :             XINPUT_GAMEPAD *Pad = &ControllerState.Gamepad;

  00549	48 8d 84 24 14
	01 00 00	 lea	 rax, QWORD PTR ControllerState$20[rsp+4]
  00551	48 89 44 24 68	 mov	 QWORD PTR Pad$2[rsp], rax

; 386  :             if(XInputGetState(0, &ControllerState) == ERROR_SUCCESS)

  00556	48 8d 94 24 10
	01 00 00	 lea	 rdx, QWORD PTR ControllerState$20[rsp]
  0055e	33 c9		 xor	 ecx, ecx
  00560	ff 15 00 00 00
	00		 call	 QWORD PTR XInputGetState_
  00566	85 c0		 test	 eax, eax
  00568	0f 85 b3 01 00
	00		 jne	 $LN13@WinMain

; 387  :             {
; 388  :               Input->Connected = true;

  0056e	48 8b 44 24 60	 mov	 rax, QWORD PTR Input$1[rsp]
  00573	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 389  :               
; 390  :               Input->Up = Pad->wButtons & XINPUT_GAMEPAD_DPAD_UP;

  00579	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  0057e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00581	83 e0 01	 and	 eax, 1
  00584	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  00589	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 391  :               Input->Down = Pad->wButtons & XINPUT_GAMEPAD_DPAD_DOWN;

  0058c	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  00591	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00594	83 e0 02	 and	 eax, 2
  00597	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  0059c	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 392  :               Input->Left= Pad->wButtons & XINPUT_GAMEPAD_DPAD_LEFT;

  0059f	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  005a4	0f b7 00	 movzx	 eax, WORD PTR [rax]
  005a7	83 e0 04	 and	 eax, 4
  005aa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  005af	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 393  :               Input->Right= Pad->wButtons & XINPUT_GAMEPAD_DPAD_RIGHT;

  005b2	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  005b7	0f b7 00	 movzx	 eax, WORD PTR [rax]
  005ba	83 e0 08	 and	 eax, 8
  005bd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  005c2	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 394  :               
; 395  :               Input->Start = Pad->wButtons & XINPUT_GAMEPAD_START;

  005c5	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  005ca	0f b7 00	 movzx	 eax, WORD PTR [rax]
  005cd	83 e0 10	 and	 eax, 16
  005d0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  005d5	89 41 14	 mov	 DWORD PTR [rcx+20], eax

; 396  :               
; 397  :               Input->LeftShoulder= Pad->wButtons & XINPUT_GAMEPAD_LEFT_SHOULDER;

  005d8	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  005dd	0f b7 00	 movzx	 eax, WORD PTR [rax]
  005e0	25 00 01 00 00	 and	 eax, 256		; 00000100H
  005e5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  005ea	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 398  :               Input->RightShoulder = Pad->wButtons & XINPUT_GAMEPAD_RIGHT_SHOULDER;

  005ed	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  005f2	0f b7 00	 movzx	 eax, WORD PTR [rax]
  005f5	25 00 02 00 00	 and	 eax, 512		; 00000200H
  005fa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  005ff	89 41 1c	 mov	 DWORD PTR [rcx+28], eax

; 399  :               
; 400  :               Input->A = Pad->wButtons & XINPUT_GAMEPAD_A;

  00602	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  00607	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0060a	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  0060f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  00614	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 401  :               Input->B = Pad->wButtons & XINPUT_GAMEPAD_B;

  00617	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  0061c	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0061f	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00624	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  00629	89 41 24	 mov	 DWORD PTR [rcx+36], eax

; 402  :               Input->X = Pad->wButtons & XINPUT_GAMEPAD_X;

  0062c	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  00631	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00634	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00639	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  0063e	89 41 28	 mov	 DWORD PTR [rcx+40], eax

; 403  :               Input->Y = Pad->wButtons & XINPUT_GAMEPAD_Y;

  00641	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  00646	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00649	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  0064e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  00653	89 41 2c	 mov	 DWORD PTR [rcx+44], eax

; 404  :               
; 405  :               Input->LeftTrigger = Pad->bLeftTrigger;

  00656	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  0065b	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  0065f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  00664	66 89 41 30	 mov	 WORD PTR [rcx+48], ax

; 406  :               Input->RightTrigger = Pad->bLeftTrigger;

  00668	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  0066d	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00671	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  00676	66 89 41 32	 mov	 WORD PTR [rcx+50], ax

; 407  :               
; 408  :               Input->LeftThumbY = (Pad->sThumbLX > XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE) ? Pad->sThumbLX : 0;

  0067a	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  0067f	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  00683	3d a9 1e 00 00	 cmp	 eax, 7849		; 00001ea9H
  00688	7e 0f		 jle	 SHORT $LN21@WinMain
  0068a	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  0068f	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  00693	89 44 24 7c	 mov	 DWORD PTR tv298[rsp], eax
  00697	eb 08		 jmp	 SHORT $LN22@WinMain
$LN21@WinMain:
  00699	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv298[rsp], 0
$LN22@WinMain:
  006a1	48 8b 44 24 60	 mov	 rax, QWORD PTR Input$1[rsp]
  006a6	0f b7 4c 24 7c	 movzx	 ecx, WORD PTR tv298[rsp]
  006ab	66 89 48 36	 mov	 WORD PTR [rax+54], cx

; 409  :               Input->LeftThumbX = (Pad->sThumbLY > XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE) ? Pad->sThumbLY : 0;

  006af	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  006b4	0f bf 40 06	 movsx	 eax, WORD PTR [rax+6]
  006b8	3d f1 21 00 00	 cmp	 eax, 8689		; 000021f1H
  006bd	7e 12		 jle	 SHORT $LN23@WinMain
  006bf	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  006c4	0f bf 40 06	 movsx	 eax, WORD PTR [rax+6]
  006c8	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv306[rsp], eax
  006cf	eb 0b		 jmp	 SHORT $LN24@WinMain
$LN23@WinMain:
  006d1	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv306[rsp], 0
$LN24@WinMain:
  006dc	48 8b 44 24 60	 mov	 rax, QWORD PTR Input$1[rsp]
  006e1	0f b7 8c 24 80
	00 00 00	 movzx	 ecx, WORD PTR tv306[rsp]
  006e9	66 89 48 34	 mov	 WORD PTR [rax+52], cx

; 410  :               
; 411  :               XINPUT_VIBRATION Vibration;
; 412  :               Vibration.wLeftMotorSpeed = Input->LeftVibration;

  006ed	48 8b 44 24 60	 mov	 rax, QWORD PTR Input$1[rsp]
  006f2	0f b7 40 38	 movzx	 eax, WORD PTR [rax+56]
  006f6	66 89 84 24 84
	00 00 00	 mov	 WORD PTR Vibration$5[rsp], ax

; 413  :               Vibration.wRightMotorSpeed = Input->RightVibration;

  006fe	48 8b 44 24 60	 mov	 rax, QWORD PTR Input$1[rsp]
  00703	0f b7 40 3a	 movzx	 eax, WORD PTR [rax+58]
  00707	66 89 84 24 86
	00 00 00	 mov	 WORD PTR Vibration$5[rsp+2], ax

; 414  :               XInputSetState(0, &Vibration);

  0070f	48 8d 94 24 84
	00 00 00	 lea	 rdx, QWORD PTR Vibration$5[rsp]
  00717	33 c9		 xor	 ecx, ecx
  00719	ff 15 00 00 00
	00		 call	 QWORD PTR XInputSetState_

; 415  :             }

  0071f	eb 0b		 jmp	 SHORT $LN14@WinMain
$LN13@WinMain:

; 416  :             else
; 417  :             {
; 418  :               Input->Connected = false;

  00721	48 8b 44 24 60	 mov	 rax, QWORD PTR Input$1[rsp]
  00726	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN14@WinMain:

; 419  :               // NOTE(evan): Controller not connected, this is NOT an error
; 420  :             }
; 421  :           }
; 422  :           
; 423  :           {
; 424  :             window_dimension NewWindowDimension = Win32GetWindowDimension(GlobalState->Window);

  0072c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00733	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  0073a	e8 00 00 00 00	 call	 Win32GetWindowDimension
  0073f	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR NewWindowDimension$10[rsp], rax

; 425  :             b32 WindowResized = false;

  00747	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR WindowResized$8[rsp], 0

; 426  :             if(NewWindowDimension.Width != GlobalState->WindowDimension.Width ||

  00752	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00759	8b 80 c0 00 00
	00		 mov	 eax, DWORD PTR [rax+192]
  0075f	39 84 24 a8 00
	00 00		 cmp	 DWORD PTR NewWindowDimension$10[rsp], eax
  00766	75 16		 jne	 SHORT $LN16@WinMain
  00768	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0076f	8b 80 c4 00 00
	00		 mov	 eax, DWORD PTR [rax+196]
  00775	39 84 24 ac 00
	00 00		 cmp	 DWORD PTR NewWindowDimension$10[rsp+4], eax
  0077c	74 21		 je	 SHORT $LN15@WinMain
$LN16@WinMain:

; 427  :                NewWindowDimension.Height != GlobalState->WindowDimension.Height)
; 428  :             {
; 429  :               WindowResized = true;

  0077e	c7 84 24 94 00
	00 00 01 00 00
	00		 mov	 DWORD PTR WindowResized$8[rsp], 1

; 430  :               GlobalState->WindowDimension = NewWindowDimension;

  00789	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00790	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR NewWindowDimension$10[rsp]
  00798	48 89 88 c0 00
	00 00		 mov	 QWORD PTR [rax+192], rcx
$LN15@WinMain:

; 431  :             }
; 432  :           }
; 433  :           
; 434  :           if(GlobalState->ShowCursor)

  0079f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  007a6	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [rax+176], 0
  007ad	74 5e		 je	 SHORT $LN17@WinMain

; 435  :           {
; 436  :             RECT WindowRect;
; 437  :             GetClientRect(GlobalState->Window, &WindowRect);

  007af	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR WindowRect$21[rsp]
  007b7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  007be	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  007c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 438  :             
; 439  :             POINT Center = { WindowRect.right/2, WindowRect.bottom/2 };

  007cb	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR WindowRect$21[rsp+8]
  007d2	99		 cdq
  007d3	2b c2		 sub	 eax, edx
  007d5	d1 f8		 sar	 eax, 1
  007d7	89 84 24 c0 00
	00 00		 mov	 DWORD PTR Center$12[rsp], eax
  007de	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR WindowRect$21[rsp+12]
  007e5	99		 cdq
  007e6	2b c2		 sub	 eax, edx
  007e8	d1 f8		 sar	 eax, 1
  007ea	89 84 24 c4 00
	00 00		 mov	 DWORD PTR Center$12[rsp+4], eax

; 440  :             ClientToScreen(GlobalState->Window, &Center);

  007f1	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR Center$12[rsp]
  007f9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00800	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00807	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ClientToScreen
$LN17@WinMain:

; 441  :             // SetCursorPos(Center.x, Center.y);
; 442  :           }
; 443  :           
; 444  :           ShouldClose = Game.GameUpdateAndRender(GlobalState->WindowDimension,

  0080d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00814	f3 0f 10 9c 24
	98 00 00 00	 movss	 xmm3, DWORD PTR DeltaTime$9[rsp]
  0081d	4c 8b c0	 mov	 r8, rax
  00820	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR EngineMemory$[rsp]
  00828	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0082f	48 8b 88 c0 00
	00 00		 mov	 rcx, QWORD PTR [rax+192]
  00836	ff 94 24 a8 01
	00 00		 call	 QWORD PTR Game$22[rsp+24]
  0083d	89 84 24 88 00
	00 00		 mov	 DWORD PTR ShouldClose$6[rsp], eax

; 445  :                                                  &EngineMemory, &GlobalState->GameInput, DeltaTime);
; 446  :         }

  00844	e9 cf fb ff ff	 jmp	 $LN2@WinMain
$LN3@WinMain:
$LN11@WinMain:

; 447  :       }
; 448  :     }

  00849	eb 07		 jmp	 SHORT $LN9@WinMain
$LN8@WinMain:

; 449  :     else
; 450  :     {
; 451  :       // TODO(evan): Logging
; 452  :       return(1);

  0084b	b8 01 00 00 00	 mov	 eax, 1
  00850	eb 0b		 jmp	 SHORT $LN1@WinMain
$LN9@WinMain:

; 453  :     }
; 454  :   }

  00852	eb 07		 jmp	 SHORT $LN7@WinMain
$LN6@WinMain:

; 455  :   else
; 456  :   {
; 457  :     // TODO(evan): Logging
; 458  :     return(1);

  00854	b8 01 00 00 00	 mov	 eax, 1
  00859	eb 02		 jmp	 SHORT $LN1@WinMain
$LN7@WinMain:

; 459  :   }
; 460  :   
; 461  :   return(0);

  0085b	33 c0		 xor	 eax, eax
$LN1@WinMain:

; 462  : }

  0085d	48 81 c4 78 02
	00 00		 add	 rsp, 632		; 00000278H
  00864	5f		 pop	 rdi
  00865	5e		 pop	 rsi
  00866	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\platform.h
_TEXT	SEGMENT
Dimension$ = 48
Memory$ = 56
Input$ = 64
DeltaTime$ = 72
GameUpdateAndRenderStub PROC

; 167  : {

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 168  :   Memory->OutputString("Inside Stub\n");

  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7757
  00020	48 8b 44 24 38	 mov	 rax, QWORD PTR Memory$[rsp]
  00025	ff 50 30	 call	 QWORD PTR [rax+48]

; 169  :   return(false);

  00028	33 c0		 xor	 eax, eax

; 170  : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
GameUpdateAndRenderStub ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\platform.h
_TEXT	SEGMENT
Arena$ = 8
BackingBuffer$ = 16
Size$ = 24
InitializeArena PROC

; 91   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 92   :   Arena->Memory = BackingBuffer;

  0000f	48 8b 44 24 08	 mov	 rax, QWORD PTR Arena$[rsp]
  00014	48 8b 4c 24 10	 mov	 rcx, QWORD PTR BackingBuffer$[rsp]
  00019	48 89 08	 mov	 QWORD PTR [rax], rcx

; 93   :   Arena->Size = Size;

  0001c	48 8b 44 24 08	 mov	 rax, QWORD PTR Arena$[rsp]
  00021	48 8b 4c 24 18	 mov	 rcx, QWORD PTR Size$[rsp]
  00026	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 94   :   Arena->Used = 0;

  0002a	48 8b 44 24 08	 mov	 rax, QWORD PTR Arena$[rsp]
  0002f	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 95   : }

  00037	c3		 ret	 0
InitializeArena ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\engine\code\types.h
_TEXT	SEGMENT
Result$ = 0
Value$ = 32
SafeTruncateUInt64 PROC

; 49   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 50   :   Assert(Value <= 0xFFFFFFFF);

  00009	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0000e	48 39 44 24 20	 cmp	 QWORD PTR Value$[rsp], rax
  00013	76 0b		 jbe	 SHORT $LN2@SafeTrunca
  00015	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN2@SafeTrunca:

; 51   :   u32 Result = (u32)Value;

  00020	8b 44 24 20	 mov	 eax, DWORD PTR Value$[rsp]
  00024	89 04 24	 mov	 DWORD PTR Result$[rsp], eax

; 52   :   return(Result);

  00027	8b 04 24	 mov	 eax, DWORD PTR Result$[rsp]

; 53   : }

  0002a	48 83 c4 18	 add	 rsp, 24
  0002e	c3		 ret	 0
SafeTruncateUInt64 ENDP
_TEXT	ENDS
END
